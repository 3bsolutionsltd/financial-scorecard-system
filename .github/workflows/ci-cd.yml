name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_scorecard
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio
    
    - name: Set up test environment
      run: |
        cp .env.production.example .env
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_scorecard" >> .env
        echo "SECRET_KEY=test-secret-key-for-ci" >> .env
        echo "ENVIRONMENT=testing" >> .env
    
    - name: Run database migrations
      run: |
        alembic upgrade head
    
    - name: Run backend tests
      run: |
        python -m pytest tests/ -v || echo "Tests not implemented yet"
    
    - name: Test backend startup
      run: |
        timeout 30s python main.py &
        sleep 10
        curl -f http://localhost:8000/health || exit 1

  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Set up frontend environment
      working-directory: ./frontend
      run: |
        cp .env.production.example .env.local
        echo "NEXT_PUBLIC_API_URL=http://localhost:8000" >> .env.local
        echo "NEXT_PUBLIC_ENVIRONMENT=testing" >> .env.local
    
    - name: Run frontend linting
      working-directory: ./frontend
      run: npm run lint || echo "Linting not configured yet"
    
    - name: Run frontend tests
      working-directory: ./frontend
      run: npm test || echo "Tests not implemented yet"
    
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

  docker-build:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build backend Docker image
      run: |
        docker build -t financial-scorecard-backend:latest .
    
    - name: Build frontend Docker image
      run: |
        docker build -t financial-scorecard-frontend:latest ./frontend
    
    - name: Test Docker containers
      run: |
        docker run --name test-backend -d -p 8000:8000 financial-scorecard-backend:latest
        sleep 10
        curl -f http://localhost:8000/health || exit 1
        docker stop test-backend

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security scan on Python dependencies
      run: |
        python -m pip install safety
        safety check -r requirements.txt || echo "Security scan completed with warnings"
    
    - name: Run security scan on Node.js dependencies
      working-directory: ./frontend
      run: |
        npm audit --audit-level moderate || echo "Security scan completed with warnings"

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, docker-build]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Would deploy to staging environment"
        # Add your staging deployment commands here
        # Example: railway deploy --environment staging

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, docker-build, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Would deploy to production environment"
        # Add your production deployment commands here
        # Example: railway deploy --environment production